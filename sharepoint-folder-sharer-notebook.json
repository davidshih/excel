{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SharePoint 資料夾分享工具 (互動式 SSO 版本) 🚀\n",
    "一次認證，永久使用！\n",
    "就像辦了吃到飽，整個月都能用！"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: 安裝必要套件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 安裝必要套件\n",
    "!pip install Office365-REST-Python-Client msal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: 載入函式庫並設定"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import webbrowser\n",
    "import pickle\n",
    "from datetime import datetime, timedelta\n",
    "from office365.sharepoint.client_context import ClientContext\n",
    "from office365.runtime.auth.user_credential import UserCredential\n",
    "from office365.runtime.auth.authentication_context import AuthenticationContext\n",
    "from urllib.parse import urlparse, quote\n",
    "import warnings\n",
    "import urllib3\n",
    "from msal import PublicClientApplication\n",
    "import requests\n",
    "\n",
    "# 關閉 SSL 警告\n",
    "urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "print(\"✅ 套件載入完成！\")\n",
    "print(\"   準備使用互動式 SSO 認證\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: 互動式瀏覽器認證（使用 MSAL）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class InteractiveSSOAuth:\n",
    "    \"\"\"\n",
    "    使用 MSAL 的互動式瀏覽器認證\n",
    "    就像用電子發票載具一樣，一次設定終身受用！\n",
    "    \"\"\"\n",
    "    def __init__(self, tenant_id=None):\n",
    "        # 使用 Microsoft 的公開 client ID for SharePoint\n",
    "        self.client_id = \"d3590ed6-52b3-4102-aeff-aad2292ab01c\"  # Microsoft Office\n",
    "        self.tenant_id = tenant_id or \"common\"\n",
    "        self.authority = f\"https://login.microsoftonline.com/{self.tenant_id}\"\n",
    "        self.scope = [\"https://graph.microsoft.com/.default\"]\n",
    "        self.app = None\n",
    "        self.result = None\n",
    "        self.token_cache_file = \"sharepoint_token_cache.pkl\"\n",
    "        \n",
    "    def load_token_cache(self):\n",
    "        \"\"\"載入已儲存的 token\"\"\"\n",
    "        try:\n",
    "            with open(self.token_cache_file, 'rb') as f:\n",
    "                cache_data = pickle.load(f)\n",
    "                if cache_data.get('expires_at', 0) > datetime.now().timestamp():\n",
    "                    self.result = cache_data\n",
    "                    print(\"✅ 載入已儲存的認證（還在有效期內）\")\n",
    "                    return True\n",
    "                else:\n",
    "                    print(\"⏰ 已儲存的認證已過期\")\n",
    "        except:\n",
    "            pass\n",
    "        return False\n",
    "        \n",
    "    def save_token_cache(self):\n",
    "        \"\"\"儲存 token\"\"\"\n",
    "        if self.result:\n",
    "            # 加入過期時間\n",
    "            cache_data = dict(self.result)\n",
    "            cache_data['expires_at'] = (datetime.now() + timedelta(hours=1)).timestamp()\n",
    "            \n",
    "            with open(self.token_cache_file, 'wb') as f:\n",
    "                pickle.dump(cache_data, f)\n",
    "            print(\"💾 認證已儲存，下次可直接使用\")\n",
    "    \n",
    "    def authenticate_interactive(self):\n",
    "        \"\"\"互動式瀏覽器認證\"\"\"\n",
    "        # 先嘗試載入已儲存的 token\n",
    "        if self.load_token_cache():\n",
    "            return self.result\n",
    "            \n",
    "        print(\"🌐 正在開啟瀏覽器進行認證...\")\n",
    "        print(\"   請在瀏覽器中完成登入\")\n",
    "        print(\"   如果已經登入公司帳號，應該會自動完成！\")\n",
    "        \n",
    "        # 建立 MSAL app\n",
    "        self.app = PublicClientApplication(\n",
    "            self.client_id,\n",
    "            authority=self.authority\n",
    "        )\n",
    "        \n",
    "        # 取得帳號（如果有的話）\n",
    "        accounts = self.app.get_accounts()\n",
    "        \n",
    "        if accounts:\n",
    "            # 嘗試靜默取得 token\n",
    "            print(\"🔍 發現已登入帳號，嘗試靜默認證...\")\n",
    "            result = self.app.acquire_token_silent(\n",
    "                self.scope,\n",
    "                account=accounts[0]\n",
    "            )\n",
    "            if result and \"access_token\" in result:\n",
    "                print(\"✅ 靜默認證成功！\")\n",
    "                self.result = result\n",
    "                self.save_token_cache()\n",
    "                return result\n",
    "        \n",
    "        # 互動式認證\n",
    "        result = self.app.acquire_token_interactive(\n",
    "            scopes=self.scope,\n",
    "            prompt=\"select_account\"  # 讓使用者選擇帳號\n",
    "        )\n",
    "        \n",
    "        if \"access_token\" in result:\n",
    "            print(\"✅ 認證成功！\")\n",
    "            self.result = result\n",
    "            self.save_token_cache()\n",
    "            return result\n",
    "        else:\n",
    "            print(f\"❌ 認證失敗：{result.get('error_description', '未知錯誤')}\")\n",
    "            return None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: 使用 Office365 API 的認證 Context"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ModernAuthContext:\n",
    "    \"\"\"\n",
    "    使用現代驗證的 SharePoint Context\n",
    "    就像用行動支付一樣先進！\n",
    "    \"\"\"\n",
    "    def __init__(self, site_url):\n",
    "        self.site_url = site_url\n",
    "        self.ctx = None\n",
    "        self.auth = None\n",
    "        \n",
    "        # 從 URL 解析 tenant\n",
    "        parsed = urlparse(site_url)\n",
    "        self.tenant = parsed.hostname.split('.')[0]\n",
    "        \n",
    "    def connect(self):\n",
    "        \"\"\"使用互動式認證連接\"\"\"\n",
    "        # 使用互動式認證\n",
    "        self.auth = InteractiveSSOAuth()\n",
    "        auth_result = self.auth.authenticate_interactive()\n",
    "        \n",
    "        if not auth_result:\n",
    "            return False\n",
    "            \n",
    "        # 取得使用者資訊\n",
    "        user_info = auth_result.get('id_token_claims', {})\n",
    "        username = user_info.get('preferred_username', '')\n",
    "        \n",
    "        print(f\"👤 登入身份：{username}\")\n",
    "        \n",
    "        # 建立 ClientContext\n",
    "        # 使用 cookie 認證方式\n",
    "        auth_context = AuthenticationContext(self.site_url)\n",
    "        \n",
    "        # 取得 cookie\n",
    "        if auth_context.acquire_token_for_user(username, password=''):\n",
    "            self.ctx = ClientContext(self.site_url, auth_context)\n",
    "        else:\n",
    "            # 如果失敗，改用其他方式\n",
    "            print(\"💡 嘗試其他認證方式...\")\n",
    "            self.ctx = self._create_context_with_token(auth_result['access_token'])\n",
    "            \n",
    "        # 測試連線\n",
    "        try:\n",
    "            web = self.ctx.web\n",
    "            self.ctx.load(web)\n",
    "            self.ctx.execute_query()\n",
    "            print(f\"✅ 成功連接到：{web.properties.get('Title', 'SharePoint 網站')}\")\n",
    "            return True\n",
    "        except Exception as e:\n",
    "            print(f\"❌ 連線測試失敗：{str(e)}\")\n",
    "            return False\n",
    "    \n",
    "    def _create_context_with_token(self, access_token):\n",
    "        \"\"\"使用 access token 建立 context\"\"\"\n",
    "        ctx = ClientContext(self.site_url)\n",
    "        \n",
    "        # 自訂認證處理\n",
    "        def _auth_handler(request):\n",
    "            request.set_header('Authorization', f'Bearer {access_token}')\n",
    "            request.verify = False\n",
    "            return True\n",
    "            \n",
    "        ctx.pending_request().beforeExecute += _auth_handler\n",
    "        return ctx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: SharePoint 分享管理器（保持連線）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SharePointManager:\n",
    "    \"\"\"\n",
    "    SharePoint 分享管理器\n",
    "    一次認證，多次使用！\n",
    "    \"\"\"\n",
    "    _instance = None\n",
    "    \n",
    "    def __new__(cls, site_url=None):\n",
    "        \"\"\"單例模式，確保只有一個實例\"\"\"\n",
    "        if cls._instance is None:\n",
    "            cls._instance = super().__new__(cls)\n",
    "            cls._instance.initialized = False\n",
    "        return cls._instance\n",
    "        \n",
    "    def __init__(self, site_url=None):\n",
    "        if not self.initialized and site_url:\n",
    "            self.site_url = site_url\n",
    "            self.auth_ctx = ModernAuthContext(site_url)\n",
    "            self.ctx = None\n",
    "            self.connected = False\n",
    "            self.initialized = True\n",
    "            \n",
    "    def ensure_connected(self):\n",
    "        \"\"\"確保已連接（只在第一次需要認證）\"\"\"\n",
    "        if not self.connected:\n",
    "            print(\"🔐 第一次使用，需要進行認證...\")\n",
    "            if self.auth_ctx.connect():\n",
    "                self.ctx = self.auth_ctx.ctx\n",
    "                self.connected = True\n",
    "                print(\"\\n✨ 認證完成！之後的操作都不需要再認證了\")\n",
    "            else:\n",
    "                raise Exception(\"無法連接到 SharePoint\")\n",
    "        return self.connected\n",
    "        \n",
    "    def find_user(self, display_name):\n",
    "        \"\"\"尋找使用者\"\"\"\n",
    "        self.ensure_connected()\n",
    "        \n",
    "        print(f\"\\n🔍 搜尋使用者：{display_name}\")\n",
    "        \n",
    "        try:\n",
    "            users = self.ctx.web.site_users\n",
    "            self.ctx.load(users)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            found_users = []\n",
    "            for user in users:\n",
    "                props = user.properties\n",
    "                title = props.get('Title', '')\n",
    "                email = props.get('Email', '')\n",
    "                \n",
    "                if not email or 'system' in title.lower():\n",
    "                    continue\n",
    "                    \n",
    "                if (display_name.lower() in title.lower() or \n",
    "                    display_name.lower() in email.lower()):\n",
    "                    found_users.append({\n",
    "                        'Title': title,\n",
    "                        'Email': email,\n",
    "                        'LoginName': props.get('LoginName')\n",
    "                    })\n",
    "                    print(f\"  ✅ {title} - {email}\")\n",
    "                    \n",
    "            if not found_users:\n",
    "                print(\"  ❌ 找不到使用者\")\n",
    "                \n",
    "            return found_users\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"❌ 搜尋錯誤：{str(e)}\")\n",
    "            return []\n",
    "            \n",
    "    def share_folder(self, folder_path, user_email_or_login, permission='Contribute'):\n",
    "        \"\"\"分享資料夾（不中斷繼承）\"\"\"\n",
    "        self.ensure_connected()\n",
    "        \n",
    "        print(f\"\\n📁 分享資料夾...\")\n",
    "        print(f\"   路徑：{folder_path}\")\n",
    "        print(f\"   對象：{user_email_or_login}\")\n",
    "        print(f\"   權限：{permission}\")\n",
    "        \n",
    "        try:\n",
    "            # 取得資料夾\n",
    "            folder = self.ctx.web.get_folder_by_server_relative_url(folder_path)\n",
    "            self.ctx.load(folder)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            # 取得 list item\n",
    "            list_item = folder.listItemAllFields\n",
    "            self.ctx.load(list_item)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            # 確保使用者\n",
    "            user = self.ctx.web.ensure_user(user_email_or_login)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            # 取得角色定義\n",
    "            role_def = self.ctx.web.role_definitions.get_by_name(permission)\n",
    "            self.ctx.load(role_def)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            # 新增權限（不中斷繼承）\n",
    "            list_item.role_assignments.add_role_assignment(user, role_def)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            print(f\"\\n🎉 分享成功！\")\n",
    "            print(f\"   {user.properties.get('Title')} 現在可以存取了\")\n",
    "            return True\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"\\n❌ 分享失敗：{str(e)}\")\n",
    "            return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6: 簡單的分享函式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 全域變數，儲存管理器實例\n",
    "manager = None\n",
    "\n",
    "def quick_share(site_url, folder_base_url, folder_name):\n",
    "    \"\"\"\n",
    "    快速分享函式\n",
    "    只要第一次認證，之後都不用！\n",
    "    \"\"\"\n",
    "    global manager\n",
    "    \n",
    "    # 如果還沒有管理器，建立一個\n",
    "    if manager is None:\n",
    "        print(\"🚀 初始化 SharePoint 管理器...\")\n",
    "        manager = SharePointManager(site_url)\n",
    "    \n",
    "    # 建構完整路徑\n",
    "    parsed = urlparse(folder_base_url)\n",
    "    base_path = parsed.path\n",
    "    if not base_path.endswith('/'):\n",
    "        base_path += '/'\n",
    "    full_path = base_path + folder_name\n",
    "    \n",
    "    print(f\"\\n📂 處理資料夾：{folder_name}\")\n",
    "    \n",
    "    # 尋找使用者\n",
    "    users = manager.find_user(folder_name)\n",
    "    \n",
    "    if not users:\n",
    "        # 手動輸入\n",
    "        email = input(\"\\n💡 找不到同名使用者，請輸入 email: \").strip()\n",
    "        if email:\n",
    "            return manager.share_folder(full_path, email)\n",
    "        return False\n",
    "        \n",
    "    # 選擇使用者\n",
    "    if len(users) == 1:\n",
    "        selected = users[0]\n",
    "    else:\n",
    "        print(\"\\n請選擇：\")\n",
    "        for i, u in enumerate(users):\n",
    "            print(f\"  {i+1}. {u['Title']} - {u['Email']}\")\n",
    "        choice = input(\"選擇 (預設 1): \").strip() or \"1\"\n",
    "        selected = users[int(choice)-1]\n",
    "        \n",
    "    # 分享\n",
    "    return manager.share_folder(\n",
    "        full_path,\n",
    "        selected['LoginName'] or selected['Email']\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7: 批次處理（一次認證，處理多個）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_process(site_url, folder_base_url, folder_names):\n",
    "    \"\"\"\n",
    "    批次處理多個資料夾\n",
    "    只要認證一次！\n",
    "    \"\"\"\n",
    "    print(f\"📦 批次處理 {len(folder_names)} 個資料夾\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    success_count = 0\n",
    "    \n",
    "    for folder_name in folder_names:\n",
    "        print(f\"\\n[{folder_names.index(folder_name)+1}/{len(folder_names)}] 處理中...\")\n",
    "        if quick_share(site_url, folder_base_url, folder_name):\n",
    "            success_count += 1\n",
    "        else:\n",
    "            print(f\"⚠️  {folder_name} 分享失敗\")\n",
    "            \n",
    "    print(f\"\\n📊 完成！成功：{success_count}/{len(folder_names)}\")\n",
    "    print(\"   就像團購成功率一樣高！\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 8: 使用範例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 設定你的 SharePoint 資訊\n",
    "SITE_URL = \"https://your-company.sharepoint.com/sites/your-site\"\n",
    "FOLDER_BASE_URL = \"https://your-company.sharepoint.com/sites/your-site/Shared%20Documents/share/\"\n",
    "\n",
    "# 範例 1: 分享單一資料夾\n",
    "# quick_share(SITE_URL, FOLDER_BASE_URL, \"John Doe\")\n",
    "\n",
    "# 範例 2: 批次分享（只要認證一次！）\n",
    "# folder_list = [\"John Doe\", \"Jane Smith\", \"Bob Chen\"]\n",
    "# batch_process(SITE_URL, FOLDER_BASE_URL, folder_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 9: 互動式介面"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def interactive_mode():\n",
    "    \"\"\"\n",
    "    互動式模式\n",
    "    一次認證，連續處理！\n",
    "    \"\"\"\n",
    "    print(\"🎯 SharePoint 資料夾分享工具\")\n",
    "    print(\"   互動式模式 - 一次認證，多次使用\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    # 收集基本資訊\n",
    "    site_url = input(\"\\n📍 SharePoint 網站 URL: \").strip()\n",
    "    folder_base = input(\"📂 資料夾基礎 URL: \").strip()\n",
    "    \n",
    "    print(\"\\n💡 提示：第一次會開啟瀏覽器認證，之後就不用了！\")\n",
    "    \n",
    "    # 連續處理\n",
    "    while True:\n",
    "        print(\"\\n\" + \"-\" * 30)\n",
    "        folder_name = input(\"\\n輸入資料夾名稱 (或 'q' 結束): \").strip()\n",
    "        \n",
    "        if folder_name.lower() == 'q':\n",
    "            break\n",
    "            \n",
    "        if folder_name:\n",
    "            quick_share(site_url, folder_base, folder_name)\n",
    "            \n",
    "    print(\"\\n👋 感謝使用！下次見～\")\n",
    "\n",
    "# 執行互動模式\n",
    "# interactive_mode()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 10: 工具函式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clear_auth_cache():\n",
    "    \"\"\"\n",
    "    清除認證快取\n",
    "    下次執行會重新認證\n",
    "    \"\"\"\n",
    "    global manager\n",
    "    manager = None\n",
    "    \n",
    "    try:\n",
    "        os.remove(\"sharepoint_token_cache.pkl\")\n",
    "        print(\"✅ 已清除認證快取\")\n",
    "    except:\n",
    "        print(\"💡 沒有找到快取檔案\")\n",
    "        \n",
    "    print(\"   下次執行會重新開啟瀏覽器認證\")\n",
    "\n",
    "# 如果需要重新認證\n",
    "# clear_auth_cache()\n",
    "\n",
    "def test_connection(site_url):\n",
    "    \"\"\"\n",
    "    測試連線\n",
    "    \"\"\"\n",
    "    global manager\n",
    "    \n",
    "    if manager is None:\n",
    "        manager = SharePointManager(site_url)\n",
    "        \n",
    "    if manager.ensure_connected():\n",
    "        print(\"✅ 連線正常！\")\n",
    "        return True\n",
    "    else:\n",
    "        print(\"❌ 連線失敗\")\n",
    "        return False\n",
    "\n",
    "# 測試連線\n",
    "# test_connection(SITE_URL)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SSL 憑證問題修正"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 如果還是有憑證問題，執行這個 cell\n",
    "def fix_ssl_globally():\n",
    "    \"\"\"\n",
    "    全域修正 SSL 憑證問題\n",
    "    就像夜市老闆說「不用發票」一樣直接！\n",
    "    \"\"\"\n",
    "    # 方法 1: 使用公司憑證（如果有的話）\n",
    "    company_cert = input(\"有公司憑證檔案嗎？(輸入路徑或按 Enter 跳過): \").strip()\n",
    "    if company_cert and os.path.exists(company_cert):\n",
    "        os.environ['REQUESTS_CA_BUNDLE'] = company_cert\n",
    "        os.environ['CURL_CA_BUNDLE'] = company_cert\n",
    "        print(f\"✅ 已設定公司憑證：{company_cert}\")\n",
    "        return\n",
    "    \n",
    "    # 方法 2: 完全關閉驗證（測試環境）\n",
    "    print(\"\\n⚠️  警告：即將關閉 SSL 憑證驗證\")\n",
    "    print(\"   這只適合在內部網路或測試環境使用！\")\n",
    "    \n",
    "    confirm = input(\"\\n確定要繼續嗎？(y/N): \").lower()\n",
    "    if confirm == 'y':\n",
    "        # 關閉所有 SSL 驗證\n",
    "        import ssl\n",
    "        ssl._create_default_https_context = ssl._create_unverified_context\n",
    "        \n",
    "        # Office365 特定設定\n",
    "        from office365.runtime.http.request_options import RequestOptions\n",
    "        RequestOptions.verify = False\n",
    "        \n",
    "        print(\"✅ SSL 驗證已關閉\")\n",
    "        print(\"   就像在夜市買東西不要發票一樣簡單！\")\n",
    "    else:\n",
    "        print(\"已取消\")\n",
    "\n",
    "# 執行修正\n",
    "# fix_ssl_globally()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 使用說明與提示"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"📖 使用說明：\")\n",
    "print(\"\\n1. 第一次執行：\")\n",
    "print(\"   - 會自動開啟瀏覽器\")\n",
    "print(\"   - 選擇或輸入公司帳號\")\n",
    "print(\"   - 完成後瀏覽器會自動關閉\")\n",
    "print(\"\\n2. 之後的執行：\")\n",
    "print(\"   - 不需要再認證\")\n",
    "print(\"   - 直接處理資料夾分享\")\n",
    "print(\"   - Token 有效期約 1 小時\")\n",
    "print(\"\\n3. 批次處理：\")\n",
    "print(\"   - 可以一次處理多個資料夾\")\n",
    "print(\"   - 只要認證一次\")\n",
    "print(\"\\n4. 如果遇到 SSL 憑證問題：\")\n",
    "print(\"   - 執行 fix_ssl_globally() 函式\")\n",
    "print(\"   - 或提供公司憑證檔案路徑\")\n",
    "print(\"   - 程式已自動嘗試關閉 SSL 驗證\")\n",
    "print(\"\\n5. 如果還是有問題：\")\n",
    "print(\"   - 執行 clear_auth_cache() 重新認證\")\n",
    "print(\"   - 確認網址正確\")\n",
    "print(\"   - 確認有權限\")\n",
    "print(\"\\n就像辦了月票，整個月都能搭捷運一樣方便！🚇\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}