{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SharePoint 資料夾分享工具 (SSO 版本) 🚀\n",
    "不中斷權限繼承版本 + 修正 SSL 憑證問題\n",
    "讓分享變得跟在 PTT 推文一樣簡單！"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: 安裝必要套件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 如果還沒安裝，請執行這個 cell\n",
    "# !pip install Office365-REST-Python-Client requests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: 載入必要的函式庫 + 修正 SSL 問題"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import ssl\n",
    "import warnings\n",
    "import urllib3\n",
    "from office365.runtime.auth.user_credential import UserCredential\n",
    "from office365.sharepoint.client_context import ClientContext\n",
    "import requests\n",
    "import getpass\n",
    "from urllib.parse import urlparse\n",
    "import json\n",
    "\n",
    "# 關閉 SSL 警告（如果你知道你在做什麼的話）\n",
    "urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n",
    "warnings.filterwarnings('ignore', message='Unverified HTTPS request')\n",
    "\n",
    "# 設定 SSL 處理\n",
    "os.environ['PYTHONWARNINGS'] = 'ignore:Unverified HTTPS request'\n",
    "\n",
    "# 建立不驗證的 SSL context\n",
    "ssl_context = ssl.create_default_context()\n",
    "ssl_context.check_hostname = False\n",
    "ssl_context.verify_mode = ssl.CERT_NONE\n",
    "\n",
    "print(\"✅ 套件載入完成！SSL 驗證已設定為寬鬆模式\")\n",
    "print(\"   （就像在夜市買東西不用發票一樣 😅）\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: 自訂 ClientContext 以處理 SSL 問題"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomClientContext(ClientContext):\n",
    "    \"\"\"\n",
    "    自訂的 ClientContext，處理 SSL 憑證問題\n",
    "    就像自己改裝機車一樣！\n",
    "    \"\"\"\n",
    "    def __init__(self, url):\n",
    "        super().__init__(url)\n",
    "        # 覆寫 requests 的 session 設定\n",
    "        self.pending_request().beforeExecute += self._patch_request\n",
    "    \n",
    "    def _patch_request(self, request):\n",
    "        \"\"\"修改每個 request 的 SSL 設定\"\"\"\n",
    "        # 設定不驗證 SSL\n",
    "        request.verify = False\n",
    "        return request"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: 主要的分享類別"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SharePointAutoSharer:\n",
    "    def __init__(self, site_url):\n",
    "        self.site_url = site_url\n",
    "        self.ctx = None\n",
    "        \n",
    "    def connect(self, username=None, password=None):\n",
    "        \"\"\"連接到 SharePoint\"\"\"\n",
    "        try:\n",
    "            if username and password:\n",
    "                # 使用提供的認證\n",
    "                print(f\"🔐 使用帳號密碼登入：{username}\")\n",
    "                self.ctx = CustomClientContext(self.site_url).with_credentials(\n",
    "                    UserCredential(username, password)\n",
    "                )\n",
    "            else:\n",
    "                # 互動式登入\n",
    "                print(\"💡 請輸入你的 Microsoft 365 認證資訊：\")\n",
    "                username = input(\"👤 使用者名稱 (email): \")\n",
    "                password = getpass.getpass(\"🔑 密碼: \")\n",
    "                self.ctx = CustomClientContext(self.site_url).with_credentials(\n",
    "                    UserCredential(username, password)\n",
    "                )\n",
    "            \n",
    "            # 測試連線\n",
    "            web = self.ctx.web\n",
    "            self.ctx.load(web)\n",
    "            self.ctx.execute_query()\n",
    "            print(f\"✅ 成功連接到：{web.properties['Title']}\")\n",
    "            return True\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"❌ 連線失敗：{str(e)}\")\n",
    "            print(\"   提示：\")\n",
    "            print(\"   1. 確認網址正確\")\n",
    "            print(\"   2. 確認帳號密碼正確\")\n",
    "            print(\"   3. 確認有權限存取此網站\")\n",
    "            return False\n",
    "    \n",
    "    def find_user(self, display_name):\n",
    "        \"\"\"根據顯示名稱尋找使用者\"\"\"\n",
    "        print(f\"🔍 搜尋使用者：{display_name}\")\n",
    "        \n",
    "        try:\n",
    "            # 方法 1: 使用 ensure_user 直接嘗試\n",
    "            try:\n",
    "                # 先嘗試用 email 格式\n",
    "                email_attempt = f\"{display_name}@{urlparse(self.site_url).hostname.split('.')[0]}.com\"\n",
    "                user = self.ctx.web.ensure_user(email_attempt)\n",
    "                self.ctx.execute_query()\n",
    "                \n",
    "                return [{\n",
    "                    'Title': user.properties.get('Title'),\n",
    "                    'Email': user.properties.get('Email'),\n",
    "                    'LoginName': user.properties.get('LoginName'),\n",
    "                    'Id': user.properties.get('Id')\n",
    "                }]\n",
    "            except:\n",
    "                pass\n",
    "            \n",
    "            # 方法 2: 搜尋所有使用者\n",
    "            users = self.ctx.web.site_users\n",
    "            self.ctx.load(users)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            found_users = []\n",
    "            for user in users:\n",
    "                user_title = user.properties.get('Title', '')\n",
    "                user_email = user.properties.get('Email', '')\n",
    "                \n",
    "                # 排除系統使用者\n",
    "                if 'system' in user_title.lower() or not user_email:\n",
    "                    continue\n",
    "                \n",
    "                # 完全符合或部分符合\n",
    "                if (display_name.lower() in user_title.lower() or \n",
    "                    display_name.lower() in user_email.lower()):\n",
    "                    found_users.append({\n",
    "                        'Title': user_title,\n",
    "                        'Email': user_email,\n",
    "                        'LoginName': user.properties.get('LoginName'),\n",
    "                        'Id': user.properties.get('Id')\n",
    "                    })\n",
    "                    print(f\"✅ 找到使用者：{user_title} ({user_email})\")\n",
    "            \n",
    "            if not found_users:\n",
    "                print(\"❌ 找不到使用者\")\n",
    "                print(\"   可能的原因：\")\n",
    "                print(\"   1. 名字拼錯了\")\n",
    "                print(\"   2. 使用者不在這個網站\")\n",
    "                print(\"   3. 使用者去買雞排還沒回來 😂\")\n",
    "            \n",
    "            return found_users\n",
    "            \n",
    "        except Exception as e:\n",
    "            print(f\"❌ 搜尋時發生錯誤：{str(e)}\")\n",
    "            return []\n",
    "    \n",
    "    def share_folder_simple(self, folder_path, user_email_or_login, permission_level='Contribute'):\n",
    "        \"\"\"\n",
    "        分享資料夾給指定使用者（不中斷權限繼承）\n",
    "        permission_level: 'Read', 'Contribute', 'Edit', 'Full Control'\n",
    "        \"\"\"\n",
    "        print(f\"\\n📁 準備分享資料夾...\")\n",
    "        print(f\"   路徑：{folder_path}\")\n",
    "        print(f\"   分享給：{user_email_or_login}\")\n",
    "        print(f\"   權限：{permission_level}\")\n",
    "        \n",
    "        try:\n",
    "            # 取得資料夾\n",
    "            folder = self.ctx.web.get_folder_by_server_relative_url(folder_path)\n",
    "            self.ctx.load(folder)\n",
    "            self.ctx.execute_query()\n",
    "            print(\"✅ 找到資料夾\")\n",
    "            \n",
    "            # 取得資料夾的 ListItem\n",
    "            list_item = folder.listItemAllFields\n",
    "            self.ctx.load(list_item)\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            # 確保使用者存在\n",
    "            user = self.ctx.web.ensure_user(user_email_or_login)\n",
    "            self.ctx.execute_query()\n",
    "            print(f\"✅ 確認使用者：{user.properties['Title']}\")\n",
    "            \n",
    "            # 取得角色定義\n",
    "            role_def_name = {\n",
    "                'Read': 'Read',\n",
    "                'Contribute': 'Contribute',\n",
    "                'Edit': 'Edit',\n",
    "                'Full Control': 'Full Control'\n",
    "            }.get(permission_level, 'Contribute')\n",
    "            \n",
    "            role_def = self.ctx.web.role_definitions.get_by_name(role_def_name)\n",
    "            self.ctx.load(role_def)\n",
    "            self.ctx.execute_query()\n",
    "            print(f\"✅ 取得權限定義：{role_def_name}\")\n",
    "            \n",
    "            # 直接新增權限（不中斷繼承）\n",
    "            role_assignment = list_item.role_assignments.add_role_assignment(\n",
    "                user, \n",
    "                role_def\n",
    "            )\n",
    "            self.ctx.execute_query()\n",
    "            \n",
    "            print(f\"\\n🎉 成功分享資料夾！\")\n",
    "            print(f\"   {user.properties['Title']} 現在有 {permission_level} 權限\")\n",
    "            print(\"   權限繼承保持不變，其他人的權限不受影響\")\n",
    "            print(\"   （就像加薪不影響其他人一樣 😄）\")\n",
    "            \n",
    "            return True\n",
    "            \n",
    "        except Exception as e:\n",
    "            error_msg = str(e)\n",
    "            print(f\"\\n❌ 分享失敗：{error_msg}\")\n",
    "            \n",
    "            # 提供更詳細的錯誤說明\n",
    "            if \"does not exist\" in error_msg:\n",
    "                print(\"   📂 找不到資料夾，請確認路徑是否正確\")\n",
    "            elif \"Access denied\" in error_msg:\n",
    "                print(\"   🔒 權限不足，你可能沒有管理此資料夾的權限\")\n",
    "            elif \"user cannot be found\" in error_msg:\n",
    "                print(\"   👤 找不到使用者，請確認 email 或登入名稱\")\n",
    "            else:\n",
    "                print(\"   💡 請檢查網路連線和認證狀態\")\n",
    "            \n",
    "            return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: 快速使用函式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quick_share_no_inheritance_break(site_url, folder_url, folder_name):\n",
    "    \"\"\"\n",
    "    快速分享函式 - 不中斷權限繼承版本\n",
    "    就像 Foodpanda 一樣快速，但不會把原本的餐廳關掉！\n",
    "    \"\"\"\n",
    "    print(\"🚀 SharePoint 資料夾分享工具\")\n",
    "    print(\"   （不中斷權限繼承特別版）\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    # 建立分享工具\n",
    "    sharer = SharePointAutoSharer(site_url)\n",
    "    \n",
    "    # 連接\n",
    "    if not sharer.connect():\n",
    "        return False\n",
    "    \n",
    "    # 從 URL 解析路徑\n",
    "    parsed = urlparse(folder_url)\n",
    "    base_path = parsed.path\n",
    "    \n",
    "    # 確保路徑格式正確\n",
    "    if not base_path.endswith('/'):\n",
    "        base_path += '/'\n",
    "    \n",
    "    # 完整資料夾路徑\n",
    "    full_folder_path = base_path + folder_name\n",
    "    print(f\"\\n📍 完整路徑：{full_folder_path}\")\n",
    "    \n",
    "    # 尋找使用者\n",
    "    print(f\"\\n🔍 尋找使用者：{folder_name}\")\n",
    "    users = sharer.find_user(folder_name)\n",
    "    \n",
    "    if not users:\n",
    "        print(\"\\n😢 找不到符合的使用者\")\n",
    "        # 嘗試手動輸入\n",
    "        manual_email = input(\"\\n💡 要不要手動輸入使用者 email？(輸入 email 或按 Enter 跳過): \").strip()\n",
    "        if manual_email:\n",
    "            return sharer.share_folder_simple(full_folder_path, manual_email, 'Contribute')\n",
    "        return False\n",
    "    \n",
    "    # 如果有多個使用者，讓使用者選擇\n",
    "    if len(users) > 1:\n",
    "        print(\"\\n找到多個使用者，請選擇：\")\n",
    "        for idx, user in enumerate(users):\n",
    "            print(f\"  {idx+1}. {user['Title']} - {user['Email']}\")\n",
    "        \n",
    "        choice = input(\"\\n請輸入編號 (預設選 1): \").strip() or \"1\"\n",
    "        try:\n",
    "            selected_user = users[int(choice) - 1]\n",
    "        except:\n",
    "            selected_user = users[0]\n",
    "    else:\n",
    "        selected_user = users[0]\n",
    "    \n",
    "    print(f\"\\n已選擇：{selected_user['Title']} ({selected_user['Email']})\")\n",
    "    \n",
    "    # 確認分享\n",
    "    confirm = input(\"\\n確定要分享嗎？(Y/n): \").strip().lower()\n",
    "    if confirm == 'n':\n",
    "        print(\"已取消分享\")\n",
    "        return False\n",
    "    \n",
    "    # 執行分享\n",
    "    return sharer.share_folder_simple(\n",
    "        full_folder_path,\n",
    "        selected_user['LoginName'] or selected_user['Email'],\n",
    "        'Contribute'\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6: 實際使用範例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 設定你的資訊\n",
    "SITE_URL = \"https://your-company.sharepoint.com/sites/your-site\"\n",
    "FOLDER_BASE_URL = \"https://your-company.sharepoint.com/sites/your-site/Shared%20Documents/share/\"\n",
    "FOLDER_NAME = \"John Doe\"\n",
    "\n",
    "# 執行分享\n",
    "# quick_share_no_inheritance_break(SITE_URL, FOLDER_BASE_URL, FOLDER_NAME)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7: 互動式介面"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def interactive_share():\n",
    "    \"\"\"\n",
    "    互動式分享介面\n",
    "    就像在 PTT 發文一樣簡單！\n",
    "    \"\"\"\n",
    "    print(\"🎯 SharePoint 資料夾分享工具\")\n",
    "    print(\"   不中斷權限繼承版本\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    # 收集資訊\n",
    "    site_url = input(\"\\n📍 SharePoint 網站 URL\\n   (例: https://company.sharepoint.com/sites/TeamSite): \").strip()\n",
    "    folder_base = input(\"\\n📂 資料夾基礎 URL\\n   (例: https://company.sharepoint.com/sites/TeamSite/Documents/share/): \").strip()\n",
    "    folder_name = input(\"\\n👤 資料夾名稱（通常是人名）: \").strip()\n",
    "    \n",
    "    # 執行分享\n",
    "    result = quick_share_no_inheritance_break(site_url, folder_base, folder_name)\n",
    "    \n",
    "    if result:\n",
    "        print(\"\\n🎊 恭喜！分享成功！\")\n",
    "        print(\"   可以去喝珍奶慶祝了 🧋\")\n",
    "    else:\n",
    "        print(\"\\n😅 分享失敗\")\n",
    "        print(\"   可能要找 IT 大大幫忙了\")\n",
    "\n",
    "# 執行互動式介面\n",
    "# interactive_share()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 額外工具：批次分享"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_share(site_url, folder_base_url, user_folder_pairs):\n",
    "    \"\"\"\n",
    "    批次分享多個資料夾\n",
    "    就像團購一樣方便！\n",
    "    \n",
    "    user_folder_pairs: list of tuples [(folder_name, user_email), ...]\n",
    "    \"\"\"\n",
    "    print(\"📦 批次分享模式啟動！\")\n",
    "    print(f\"   準備分享 {len(user_folder_pairs)} 個資料夾\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    # 建立連線\n",
    "    sharer = SharePointAutoSharer(site_url)\n",
    "    if not sharer.connect():\n",
    "        print(\"❌ 無法連線\")\n",
    "        return\n",
    "    \n",
    "    # 處理每個分享\n",
    "    success_count = 0\n",
    "    for folder_name, user_email in user_folder_pairs:\n",
    "        print(f\"\\n處理：{folder_name} → {user_email}\")\n",
    "        \n",
    "        full_path = folder_base_url.rstrip('/') + '/' + folder_name\n",
    "        \n",
    "        if sharer.share_folder_simple(full_path, user_email, 'Contribute'):\n",
    "            success_count += 1\n",
    "        else:\n",
    "            print(f\"   ⚠️  {folder_name} 分享失敗\")\n",
    "    \n",
    "    print(f\"\\n📊 完成！成功分享 {success_count}/{len(user_folder_pairs)} 個資料夾\")\n",
    "    print(\"   就像外送平台的成功率一樣 😄\")\n",
    "\n",
    "# 使用範例：\n",
    "# batch_list = [\n",
    "#     (\"John Doe\", \"john.doe@company.com\"),\n",
    "#     (\"Jane Smith\", \"jane.smith@company.com\"),\n",
    "#     (\"Bob Chen\", \"bob.chen@company.com\")\n",
    "# ]\n",
    "# batch_share(SITE_URL, FOLDER_BASE_URL, batch_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 除錯資訊"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"💡 如果還是有 SSL 問題，可以嘗試：\")\n",
    "print(\"1. 更新 certifi: pip install --upgrade certifi\")\n",
    "print(\"2. 設定公司 proxy（如果有的話）\")\n",
    "print(\"3. 使用公司內部的憑證\")\n",
    "print(\"\\n目前 SSL 設定：不驗證憑證（測試環境適用）\")\n",
    "print(\"正式環境請考慮使用適當的憑證驗證！\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}