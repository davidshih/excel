{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SharePoint 資料夾分享工具 (瀏覽器互動式 SSO) 🚀\n",
    "使用正統的瀏覽器 SSO 認證，不碰憑證問題！\n",
    "就像刷悠遊卡進站一樣簡單！"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: 安裝必要套件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 安裝必要套件\n",
    "!pip install msal requests sharepoint-rest-api"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: 載入函式庫"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import requests\n",
    "import webbrowser\n",
    "from urllib.parse import urlparse, quote\n",
    "from msal import PublicClientApplication\n",
    "import pickle\n",
    "from datetime import datetime, timedelta\n",
    "import time\n",
    "\n",
    "print(\"✅ 套件載入完成！\")\n",
    "print(\"   準備使用瀏覽器互動式 SSO 認證\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: 瀏覽器互動式認證 (使用 Microsoft Graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BrowserInteractiveAuth:\n",
    "    \"\"\"\n",
    "    使用瀏覽器互動式 SSO 認證\n",
    "    完全不碰憑證問題！\n",
    "    \"\"\"\n",
    "    def __init__(self, tenant_id=\"common\"):\n",
    "        self.tenant_id = tenant_id\n",
    "        # 使用 Microsoft 官方的 SharePoint client ID\n",
    "        self.client_id = \"00000003-0000-0ff1-ce00-000000000000\"  # SharePoint\n",
    "        self.app = None\n",
    "        self.token_cache = {}\n",
    "        self.token_file = \"sp_auth_cache.pkl\"\n",
    "        \n",
    "    def load_cached_token(self):\n",
    "        \"\"\"載入快取的 token\"\"\"\n",
    "        try:\n",
    "            with open(self.token_file, 'rb') as f:\n",
    "                cache = pickle.load(f)\n",
    "                if cache.get('expires_at', 0) > time.time():\n",
    "                    self.token_cache = cache\n",
    "                    print(\"✅ 使用快取的認證（還在有效期內）\")\n",
    "                    return True\n",
    "        except:\n",
    "            pass\n",
    "        return False\n",
    "        \n",
    "    def save_token(self, token_data):\n",
    "        \"\"\"儲存 token\"\"\"\n",
    "        self.token_cache = token_data\n",
    "        self.token_cache['expires_at'] = time.time() + 3600  # 1 小時\n",
    "        with open(self.token_file, 'wb') as f:\n",
    "            pickle.dump(self.token_cache, f)\n",
    "        print(\"💾 認證已儲存\")\n",
    "        \n",
    "    def get_sharepoint_token(self, site_url):\n",
    "        \"\"\"取得 SharePoint 專用的 token\"\"\"\n",
    "        # 先檢查快取\n",
    "        if self.load_cached_token():\n",
    "            return self.token_cache.get('access_token')\n",
    "            \n",
    "        print(\"🌐 開始瀏覽器互動式認證...\")\n",
    "        print(\"   瀏覽器將會開啟，請完成登入\")\n",
    "        print(\"   支援 SSO 和 MFA！\")\n",
    "        \n",
    "        # 解析網站 URL\n",
    "        parsed = urlparse(site_url)\n",
    "        resource = f\"{parsed.scheme}://{parsed.netloc}\"\n",
    "        \n",
    "        # 建立 MSAL app\n",
    "        self.app = PublicClientApplication(\n",
    "            self.client_id,\n",
    "            authority=f\"https://login.microsoftonline.com/{self.tenant_id}\"\n",
    "        )\n",
    "        \n",
    "        # SharePoint 的 scope\n",
    "        scopes = [f\"{resource}/.default\"]\n",
    "        \n",
    "        # 執行互動式認證\n",
    "        result = self.app.acquire_token_interactive(\n",
    "            scopes=scopes,\n",
    "            prompt=\"select_account\"\n",
    "        )\n",
    "        \n",
    "        if \"access_token\" in result:\n",
    "            print(\"✅ 認證成功！\")\n",
    "            self.save_token(result)\n",
    "            return result['access_token']\n",
    "        else:\n",
    "            print(f\"❌ 認證失敗：{result.get('error_description', '未知錯誤')}\")\n",
    "            return None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: SharePoint REST API 操作"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SharePointRESTClient:\n",
    "    \"\"\"\n",
    "    使用 REST API 操作 SharePoint\n",
    "    不需要 Office365 套件，避開憑證問題！\n",
    "    \"\"\"\n",
    "    def __init__(self, site_url, access_token):\n",
    "        self.site_url = site_url\n",
    "        self.access_token = access_token\n",
    "        self.headers = {\n",
    "            'Authorization': f'Bearer {access_token}',\n",
    "            'Accept': 'application/json;odata=verbose',\n",
    "            'Content-Type': 'application/json;odata=verbose'\n",
    "        }\n",
    "        \n",
    "    def test_connection(self):\n",
    "        \"\"\"測試連線\"\"\"\n",
    "        url = f\"{self.site_url}/_api/web\"\n",
    "        response = requests.get(url, headers=self.headers)\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            web_info = response.json()\n",
    "            title = web_info.get('d', {}).get('Title', 'SharePoint Site')\n",
    "            print(f\"✅ 成功連接到：{title}\")\n",
    "            return True\n",
    "        else:\n",
    "            print(f\"❌ 連線失敗：{response.status_code}\")\n",
    "            return False\n",
    "            \n",
    "    def find_user(self, display_name):\n",
    "        \"\"\"尋找使用者\"\"\"\n",
    "        print(f\"\\n🔍 搜尋使用者：{display_name}\")\n",
    "        \n",
    "        # 使用 REST API 搜尋使用者\n",
    "        url = f\"{self.site_url}/_api/web/siteusers\"\n",
    "        response = requests.get(url, headers=self.headers)\n",
    "        \n",
    "        if response.status_code != 200:\n",
    "            print(f\"❌ 無法取得使用者清單：{response.status_code}\")\n",
    "            return []\n",
    "            \n",
    "        users_data = response.json()\n",
    "        users = users_data.get('d', {}).get('results', [])\n",
    "        \n",
    "        found_users = []\n",
    "        for user in users:\n",
    "            title = user.get('Title', '')\n",
    "            email = user.get('Email', '')\n",
    "            login = user.get('LoginName', '')\n",
    "            \n",
    "            if email and 'system' not in title.lower():\n",
    "                if (display_name.lower() in title.lower() or \n",
    "                    display_name.lower() in email.lower()):\n",
    "                    found_users.append({\n",
    "                        'Title': title,\n",
    "                        'Email': email,\n",
    "                        'LoginName': login,\n",
    "                        'Id': user.get('Id')\n",
    "                    })\n",
    "                    print(f\"  ✅ {title} - {email}\")\n",
    "                    \n",
    "        if not found_users:\n",
    "            print(\"  ❌ 找不到使用者\")\n",
    "            \n",
    "        return found_users\n",
    "        \n",
    "    def share_folder(self, folder_path, user_login_name, permission='Contribute'):\n",
    "        \"\"\"分享資料夾\"\"\"\n",
    "        print(f\"\\n📁 分享資料夾...\")\n",
    "        print(f\"   路徑：{folder_path}\")\n",
    "        print(f\"   使用者：{user_login_name}\")\n",
    "        \n",
    "        try:\n",
    "            # Step 1: 取得資料夾資訊\n",
    "            folder_url = f\"{self.site_url}/_api/web/GetFolderByServerRelativeUrl('{folder_path}')\"\n",
    "            folder_resp = requests.get(folder_url, headers=self.headers)\n",
    "            \n",
    "            if folder_resp.status_code != 200:\n",
    "                print(f\"❌ 找不到資料夾：{folder_resp.status_code}\")\n",
    "                return False\n",
    "                \n",
    "            # Step 2: 取得 List Item\n",
    "            listitem_url = f\"{folder_url}/ListItemAllFields\"\n",
    "            listitem_resp = requests.get(listitem_url, headers=self.headers)\n",
    "            \n",
    "            if listitem_resp.status_code != 200:\n",
    "                print(\"❌ 無法取得資料夾項目\")\n",
    "                return False\n",
    "                \n",
    "            listitem_data = listitem_resp.json()\n",
    "            item_id = listitem_data.get('d', {}).get('Id')\n",
    "            \n",
    "            # Step 3: 確保使用者\n",
    "            ensure_user_url = f\"{self.site_url}/_api/web/ensureuser\"\n",
    "            user_data = {\n",
    "                'logonName': user_login_name\n",
    "            }\n",
    "            \n",
    "            ensure_resp = requests.post(\n",
    "                ensure_user_url, \n",
    "                headers=self.headers,\n",
    "                json=user_data\n",
    "            )\n",
    "            \n",
    "            if ensure_resp.status_code not in [200, 201]:\n",
    "                print(f\"❌ 無法確認使用者：{ensure_resp.status_code}\")\n",
    "                return False\n",
    "                \n",
    "            user_info = ensure_resp.json()\n",
    "            user_id = user_info.get('d', {}).get('Id')\n",
    "            \n",
    "            # Step 4: 取得角色定義 ID\n",
    "            role_map = {\n",
    "                'Read': 1073741826,\n",
    "                'Contribute': 1073741827,\n",
    "                'Edit': 1073741830,\n",
    "                'Full Control': 1073741829\n",
    "            }\n",
    "            role_id = role_map.get(permission, 1073741827)\n",
    "            \n",
    "            # Step 5: 指派權限\n",
    "            # 使用 SharePoint 的權限繼承 API\n",
    "            assign_url = f\"{self.site_url}/_api/web/lists/getbytitle('Documents')/items({item_id})/roleassignments/addroleassignment(principalid={user_id},roledefid={role_id})\"\n",
    "            \n",
    "            assign_resp = requests.post(assign_url, headers=self.headers)\n",
    "            \n",
    "            if assign_resp.status_code in [200, 201]:\n",
    "                print(\"✅ 成功分享資料夾！\")\n",
    "                print(f\"   使用者現在有 {permission} 權限\")\n",
    "                return True\n",
    "            else:\n",
    "                print(f\"❌ 分享失敗：{assign_resp.status_code}\")\n",
    "                return False\n",
    "                \n",
    "        except Exception as e:\n",
    "            print(f\"❌ 發生錯誤：{str(e)}\")\n",
    "            return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: 主要操作函式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 全域變數\n",
    "auth_manager = None\n",
    "sp_client = None\n",
    "\n",
    "def init_sharepoint(site_url):\n",
    "    \"\"\"\n",
    "    初始化 SharePoint 連線\n",
    "    使用瀏覽器 SSO 認證\n",
    "    \"\"\"\n",
    "    global auth_manager, sp_client\n",
    "    \n",
    "    if sp_client is None:\n",
    "        print(\"🚀 初始化 SharePoint 連線...\")\n",
    "        \n",
    "        # 從 URL 取得 tenant\n",
    "        parsed = urlparse(site_url)\n",
    "        tenant = parsed.hostname.split('.')[0]\n",
    "        \n",
    "        # 建立認證管理器\n",
    "        auth_manager = BrowserInteractiveAuth(f\"{tenant}.onmicrosoft.com\")\n",
    "        \n",
    "        # 取得 token\n",
    "        token = auth_manager.get_sharepoint_token(site_url)\n",
    "        \n",
    "        if token:\n",
    "            # 建立 SharePoint client\n",
    "            sp_client = SharePointRESTClient(site_url, token)\n",
    "            \n",
    "            # 測試連線\n",
    "            if sp_client.test_connection():\n",
    "                print(\"\\n✨ 連線成功！可以開始分享資料夾了\")\n",
    "                return True\n",
    "            else:\n",
    "                sp_client = None\n",
    "                return False\n",
    "        else:\n",
    "            return False\n",
    "    \n",
    "    return True\n",
    "\n",
    "def share_folder_interactive(site_url, folder_base_url, folder_name):\n",
    "    \"\"\"\n",
    "    互動式分享資料夾\n",
    "    \"\"\"\n",
    "    # 初始化連線\n",
    "    if not init_sharepoint(site_url):\n",
    "        print(\"❌ 無法連線到 SharePoint\")\n",
    "        return False\n",
    "        \n",
    "    # 建構完整路徑\n",
    "    parsed = urlparse(folder_base_url)\n",
    "    base_path = parsed.path\n",
    "    if not base_path.endswith('/'):\n",
    "        base_path += '/'\n",
    "    full_path = base_path + folder_name\n",
    "    \n",
    "    print(f\"\\n📂 處理資料夾：{folder_name}\")\n",
    "    print(f\"   完整路徑：{full_path}\")\n",
    "    \n",
    "    # 尋找使用者\n",
    "    users = sp_client.find_user(folder_name)\n",
    "    \n",
    "    if not users:\n",
    "        # 手動輸入\n",
    "        email = input(\"\\n💡 找不到同名使用者，請輸入 email: \").strip()\n",
    "        if email:\n",
    "            return sp_client.share_folder(full_path, email)\n",
    "        return False\n",
    "        \n",
    "    # 選擇使用者\n",
    "    if len(users) == 1:\n",
    "        selected = users[0]\n",
    "    else:\n",
    "        print(\"\\n請選擇要分享的使用者：\")\n",
    "        for i, user in enumerate(users):\n",
    "            print(f\"  {i+1}. {user['Title']} - {user['Email']}\")\n",
    "        choice = input(\"\\n選擇 (預設 1): \").strip() or \"1\"\n",
    "        selected = users[int(choice)-1]\n",
    "        \n",
    "    print(f\"\\n即將分享給：{selected['Title']} ({selected['Email']})\")\n",
    "    \n",
    "    # 執行分享\n",
    "    return sp_client.share_folder(full_path, selected['LoginName'])\n",
    "\n",
    "def batch_share(site_url, folder_base_url, folder_list):\n",
    "    \"\"\"\n",
    "    批次分享\n",
    "    只需要認證一次！\n",
    "    \"\"\"\n",
    "    print(f\"📦 批次分享 {len(folder_list)} 個資料夾\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    success_count = 0\n",
    "    \n",
    "    for i, folder_name in enumerate(folder_list):\n",
    "        print(f\"\\n[{i+1}/{len(folder_list)}] 處理中...\")\n",
    "        if share_folder_interactive(site_url, folder_base_url, folder_name):\n",
    "            success_count += 1\n",
    "        else:\n",
    "            print(f\"⚠️  {folder_name} 分享失敗\")\n",
    "            \n",
    "    print(f\"\\n✅ 完成！成功：{success_count}/{len(folder_list)}\")\n",
    "    print(\"   就像團購一樣成功！\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6: 使用範例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 設定你的 SharePoint 資訊\n",
    "SITE_URL = \"https://your-company.sharepoint.com/sites/your-site\"\n",
    "FOLDER_BASE_URL = \"https://your-company.sharepoint.com/sites/your-site/Shared%20Documents/share/\"\n",
    "\n",
    "# 單一分享\n",
    "# share_folder_interactive(SITE_URL, FOLDER_BASE_URL, \"John Doe\")\n",
    "\n",
    "# 批次分享\n",
    "# folder_list = [\"John Doe\", \"Jane Smith\", \"Bob Chen\"]\n",
    "# batch_share(SITE_URL, FOLDER_BASE_URL, folder_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7: 工具函式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clear_auth():\n",
    "    \"\"\"\n",
    "    清除認證快取\n",
    "    \"\"\"\n",
    "    global auth_manager, sp_client\n",
    "    auth_manager = None\n",
    "    sp_client = None\n",
    "    \n",
    "    try:\n",
    "        os.remove(\"sp_auth_cache.pkl\")\n",
    "        print(\"✅ 已清除認證快取\")\n",
    "    except:\n",
    "        pass\n",
    "        \n",
    "    print(\"   下次執行會重新開啟瀏覽器認證\")\n",
    "\n",
    "def test_api_call(site_url):\n",
    "    \"\"\"\n",
    "    測試 API 呼叫\n",
    "    \"\"\"\n",
    "    if not init_sharepoint(site_url):\n",
    "        return\n",
    "        \n",
    "    # 測試取得網站資訊\n",
    "    url = f\"{site_url}/_api/web/lists\"\n",
    "    response = requests.get(url, headers=sp_client.headers)\n",
    "    \n",
    "    if response.status_code == 200:\n",
    "        lists = response.json().get('d', {}).get('results', [])\n",
    "        print(f\"\\n📋 網站中的清單：\")\n",
    "        for lst in lists[:5]:  # 只顯示前 5 個\n",
    "            print(f\"   - {lst.get('Title')}\")\n",
    "    else:\n",
    "        print(f\"❌ API 測試失敗：{response.status_code}\")\n",
    "\n",
    "# 測試連線\n",
    "# test_api_call(SITE_URL)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 使用說明"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"📖 使用說明：\")\n",
    "print(\"\\n✨ 這個版本的特色：\")\n",
    "print(\"   - 使用瀏覽器互動式 SSO 認證\")\n",
    "print(\"   - 支援 MFA\")\n",
    "print(\"   - 不碰憑證問題\")\n",
    "print(\"   - 使用 REST API 而非 Office365 套件\")\n",
    "print(\"\\n🚀 開始使用：\")\n",
    "print(\"\\n1. 單一分享：\")\n",
    "print(\"   share_folder_interactive(SITE_URL, FOLDER_BASE_URL, 'John Doe')\")\n",
    "print(\"\\n2. 批次分享：\")\n",
    "print(\"   batch_share(SITE_URL, FOLDER_BASE_URL, ['A', 'B', 'C'])\")\n",
    "print(\"\\n3. 測試連線：\")\n",
    "print(\"   test_api_call(SITE_URL)\")\n",
    "print(\"\\n💡 重要提醒：\")\n",
    "print(\"   - 第一次會開啟瀏覽器\")\n",
    "print(\"   - 選擇你的公司帳號\")\n",
    "print(\"   - 完成 MFA (如果需要)\")\n",
    "print(\"   - Token 會自動儲存 1 小時\")\n",
    "print(\"\\n就像搭高鐵刷證件一樣正規！🚄\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}