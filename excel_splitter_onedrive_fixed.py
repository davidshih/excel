#!/usr/bin/env python3
"""
修正版 OneDrive Excel 分割器
解決「檔案格式或副檔名無效」錯誤

主要改進：
1. 使用隱藏列替代刪除列
2. 保持檔案結構完整性
3. 加強錯誤處理和驗證
4. 提供多種處理方法選擇
"""

import os
import shutil
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
import glob
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import platform
import sys

def create_jupyter_notebook_fixed():
    """建立修正版的 Jupyter notebook 內容"""
    
    notebook_content = """
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Excel 分割器 - OneDrive 修正版\\n",
    "\\n",
    "## 🚨 解決檔案格式錯誤問題\\n",
    "\\n",
    "此版本專門解決 OneDrive 版本出現的「檔案格式或副檔名無效」錯誤。\\n",
    "\\n",
    "### 主要修正：\\n",
    "- ✅ **使用隱藏列替代刪除列**：避免破壞檔案結構\\n",
    "- ✅ **保留完整資料驗證**：維持所有 Excel 功能\\n",
    "- ✅ **加強檔案驗證**：確保輸出檔案可正常開啟\\n",
    "- ✅ **多重處理方法**：提供不同程度的處理選項\\n",
    "- ✅ **詳細錯誤追蹤**：協助診斷問題\\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# 安裝與匯入必要套件\\n",
    "import sys\\n",
    "import subprocess\\n",
    "import platform\\n",
    "\\n",
    "required_packages = [\\n",
    "    'pandas',\\n",
    "    'openpyxl',\\n",
    "    'ipywidgets'\\n",
    "]\\n",
    "\\n",
    "print(\\"🔍 檢查套件安裝狀態...\\")\\n",
    "for package in required_packages:\\n",
    "    try:\\n",
    "        __import__(package.replace('-', '_'))\\n",
    "        print(f\\"✓ {package} 已安裝\\")\\n",
    "    except ImportError:\\n",
    "        print(f\\"📦 正在安裝 {package}...\\")\\n",
    "        subprocess.check_call([sys.executable, \\"-m\\", \\"pip\\", \\"install\\", package])\\n",
    "        print(f\\"✓ {package} 安裝完成\\")\\n",
    "\\n",
    "print(\\"\\\\n✅ 所有必要套件已就緒！\\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "import os\\n",
    "import shutil\\n",
    "import pandas as pd\\n",
    "from pathlib import Path\\n",
    "from openpyxl import load_workbook\\n",
    "from openpyxl.utils import get_column_letter\\n",
    "import glob\\n",
    "from datetime import datetime\\n",
    "from IPython.display import display, HTML, clear_output\\n",
    "import ipywidgets as widgets\\n",
    "import time\\n",
    "from typing import Dict, List, Optional, Tuple\\n",
    "import re\\n",
    "\\n",
    "# 檢查 tkinter (檔案對話框)\\n",
    "try:\\n",
    "    import tkinter as tk\\n",
    "    from tkinter import filedialog, messagebox\\n",
    "    TKINTER_AVAILABLE = True\\n",
    "except ImportError:\\n",
    "    TKINTER_AVAILABLE = False\\n",
    "\\n",
    "print(\\"✓ 函式庫匯入成功\\")\\n",
    "print(f\\"✓ 作業系統: {platform.system()}\\")\\n",
    "print(f\\"✓ 檔案對話框: {'可用' if TKINTER_AVAILABLE else '不可用'}\\")\\n",
    "\\n",
    "# 全域變數\\n",
    "last_folder = os.path.expanduser(\\"~\\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 🔧 核心修正函數\\n",
    "\\n",
    "以下是解決檔案格式問題的核心函數："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def sanitize_folder_name(name: str) -> str:\\n",
    "    \\"\\"\\"清理資料夾名稱，確保相容性\\"\\"\\"\\n",
    "    invalid_chars = ['/', '\\\\\\\\', ':', '*', '?', '\"', '<', '>', '|', '#', '%']\\n",
    "    sanitized = name.strip()\\n",
    "    \\n",
    "    for char in invalid_chars:\\n",
    "        sanitized = sanitized.replace(char, '_')\\n",
    "    \\n",
    "    if len(sanitized) > 255:\\n",
    "        sanitized = sanitized[:255].rstrip()\\n",
    "    \\n",
    "    return sanitized\\n",
    "\\n",
    "def find_column(worksheet, column_name):\\n",
    "    \\"\\"\\"在工作表中尋找欄位\\"\\"\\"\\n",
    "    for col_idx, cell in enumerate(worksheet[1], start=1):\\n",
    "        if cell.value == column_name:\\n",
    "            return col_idx\\n",
    "    raise ValueError(f\\"找不到 '{column_name}' 欄位！\\")\\n",
    "\\n",
    "def validate_excel_file(file_path):\\n",
    "    \\"\\"\\"驗證 Excel 檔案的完整性\\"\\"\\"\\n",
    "    try:\\n",
    "        wb = load_workbook(file_path, data_only=False)\\n",
    "        ws = wb.active\\n",
    "        \\n",
    "        # 基本檢查\\n",
    "        checks = {\\n",
    "            'has_data': ws.max_row > 1,\\n",
    "            'has_columns': ws.max_column > 0,\\n",
    "            'first_row_exists': ws.cell(1, 1).value is not None,\\n",
    "            'can_save': True\\n",
    "        }\\n",
    "        \\n",
    "        # 嘗試儲存測試\\n",
    "        temp_path = file_path + '.temp.xlsx'\\n",
    "        wb.save(temp_path)\\n",
    "        os.remove(temp_path)\\n",
    "        \\n",
    "        wb.close()\\n",
    "        return checks, None\\n",
    "    except Exception as e:\\n",
    "        return None, str(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def process_reviewer_excel_hide_rows_safe(file_path, reviewer, column_name, output_folder):\\n",
    "    \\"\\"\\"\\n",
    "    🚨 修正版處理函數 - 使用隱藏列方法\\n",
    "    解決檔案格式錯誤的核心方法\\n",
    "    \\"\\"\\"\\n",
    "    try:\\n",
    "        reviewer_name = sanitize_folder_name(str(reviewer).strip())\\n",
    "        reviewer_folder = os.path.join(output_folder, reviewer_name)\\n",
    "        os.makedirs(reviewer_folder, exist_ok=True)\\n",
    "        \\n",
    "        base_name = os.path.basename(file_path)\\n",
    "        name_without_ext = os.path.splitext(base_name)[0]\\n",
    "        ext = os.path.splitext(base_name)[1]\\n",
    "        new_filename = f\\"{name_without_ext} - {reviewer_name}{ext}\\"\\n",
    "        dst_path = os.path.join(reviewer_folder, new_filename)\\n",
    "        \\n",
    "        # 先複製整個檔案\\n",
    "        shutil.copy2(file_path, dst_path)\\n",
    "        print(f\\"  ✓ 已複製檔案: {new_filename}\\")\\n",
    "        \\n",
    "        # 載入並處理檔案\\n",
    "        wb = load_workbook(dst_path, data_only=False, keep_vba=True, keep_links=True)\\n",
    "        main_ws = wb.active\\n",
    "        \\n",
    "        # 尋找審查者欄位\\n",
    "        col_idx = find_column(main_ws, column_name)\\n",
    "        \\n",
    "        # 🔧 關鍵修正：使用隱藏列而非刪除列\\n",
    "        rows_to_hide = []\\n",
    "        for row in range(2, main_ws.max_row + 1):\\n",
    "            cell_value = main_ws.cell(row=row, column=col_idx).value\\n",
    "            if str(cell_value).strip() != str(reviewer).strip():\\n",
    "                rows_to_hide.append(row)\\n",
    "        \\n",
    "        print(f\\"  ✓ 找到 {len(rows_to_hide)} 列需要隱藏\\")\\n",
    "        \\n",
    "        # 隱藏非相關列（保持檔案結構完整）\\n",
    "        for row in rows_to_hide:\\n",
    "            main_ws.row_dimensions[row].hidden = True\\n",
    "        \\n",
    "        # 設定自動篩選\\n",
    "        if main_ws.max_row > 1:\\n",
    "            try:\\n",
    "                # 清除現有篩選\\n",
    "                main_ws.auto_filter.ref = None\\n",
    "                \\n",
    "                # 設定新的篩選範圍\\n",
    "                filter_range = f\\"A1:{get_column_letter(main_ws.max_column)}{main_ws.max_row}\\"\\n",
    "                main_ws.auto_filter.ref = filter_range\\n",
    "                \\n",
    "                # 設定篩選條件\\n",
    "                main_ws.auto_filter.add_filter_column(col_idx - 1, [str(reviewer)])\\n",
    "                print(f\\"  ✓ 已設定篩選條件\\")\\n",
    "            except Exception as e:\\n",
    "                print(f\\"  ⚠️ 篩選設定警告: {e}\\")\\n",
    "        \\n",
    "        # 儲存變更\\n",
    "        wb.save(dst_path)\\n",
    "        wb.close()\\n",
    "        \\n",
    "        # 驗證輸出檔案\\n",
    "        validation, error = validate_excel_file(dst_path)\\n",
    "        if error:\\n",
    "            print(f\\"  ❌ 輸出檔案驗證失敗: {error}\\")\\n",
    "            return False, None, None\\n",
    "        else:\\n",
    "            print(f\\"  ✅ 輸出檔案驗證通過，檔案可正常開啟\\")\\n",
    "        \\n",
    "        return True, reviewer_folder, new_filename\\n",
    "        \\n",
    "    except Exception as e:\\n",
    "        print(f\\"❌ 處理 {reviewer} 時發生錯誤: {str(e)}\\")\\n",
    "        import traceback\\n",
    "        traceback.print_exc()\\n",
    "        return False, None, None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def process_reviewer_excel_minimal_safe(file_path, reviewer, column_name, output_folder):\\n",
    "    \\"\\"\\"\\n",
    "    🛡️ 最安全處理方法 - 僅複製和篩選\\n",
    "    適用於高度敏感或複雜的 Excel 檔案\\n",
    "    \\"\\"\\"\\n",
    "    try:\\n",
    "        reviewer_name = sanitize_folder_name(str(reviewer).strip())\\n",
    "        reviewer_folder = os.path.join(output_folder, reviewer_name)\\n",
    "        os.makedirs(reviewer_folder, exist_ok=True)\\n",
    "        \\n",
    "        base_name = os.path.basename(file_path)\\n",
    "        name_without_ext = os.path.splitext(base_name)[0]\\n",
    "        ext = os.path.splitext(base_name)[1]\\n",
    "        new_filename = f\\"{name_without_ext} - {reviewer_name} - 篩選版{ext}\\"\\n",
    "        dst_path = os.path.join(reviewer_folder, new_filename)\\n",
    "        \\n",
    "        # 直接複製檔案\\n",
    "        shutil.copy2(file_path, dst_path)\\n",
    "        print(f\\"  ✓ 已複製檔案: {new_filename}\\")\\n",
    "        \\n",
    "        # 僅設定篩選，完全不修改資料\\n",
    "        wb = load_workbook(dst_path, data_only=False, keep_vba=True, keep_links=True)\\n",
    "        main_ws = wb.active\\n",
    "        \\n",
    "        # 尋找審查者欄位\\n",
    "        col_idx = find_column(main_ws, column_name)\\n",
    "        \\n",
    "        # 僅設定自動篩選\\n",
    "        if main_ws.max_row > 1:\\n",
    "            try:\\n",
    "                filter_range = f\\"A1:{get_column_letter(main_ws.max_column)}{main_ws.max_row}\\"\\n",
    "                main_ws.auto_filter.ref = filter_range\\n",
    "                main_ws.auto_filter.add_filter_column(col_idx - 1, [str(reviewer)])\\n",
    "                print(f\\"  ✓ 已設定篩選，保持所有資料完整\\")\\n",
    "            except Exception as e:\\n",
    "                print(f\\"  ⚠️ 篩選設定失敗: {e}\\")\\n",
    "        \\n",
    "        # 儲存\\n",
    "        wb.save(dst_path)\\n",
    "        wb.close()\\n",
    "        \\n",
    "        # 驗證\\n",
    "        validation, error = validate_excel_file(dst_path)\\n",
    "        if error:\\n",
    "            print(f\\"  ❌ 檔案驗證失敗: {error}\\")\\n",
    "            return False, None, None\\n",
    "        else:\\n",
    "            print(f\\"  ✅ 檔案驗證通過\\")\\n",
    "        \\n",
    "        return True, reviewer_folder, new_filename\\n",
    "        \\n",
    "    except Exception as e:\\n",
    "        print(f\\"❌ 最安全處理失敗 {reviewer}: {str(e)}\\")\\n",
    "        return False, None, None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 🎛️ 使用者介面（修正版）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# 檔案選擇\\n",
    "display(HTML(\\"<h3>📁 步驟 1: 檔案選擇</h3>\\"))\\n",
    "\\n",
    "def select_excel_file():\\n",
    "    global last_folder\\n",
    "    if not TKINTER_AVAILABLE:\\n",
    "        print(\\"❌ 檔案對話框不可用，請手動輸入檔案路徑\\")\\n",
    "        return\\n",
    "    \\n",
    "    try:\\n",
    "        root = tk.Tk()\\n",
    "        root.withdraw()\\n",
    "        root.lift()\\n",
    "        root.attributes('-topmost', True)\\n",
    "        \\n",
    "        file_path = filedialog.askopenfilename(\\n",
    "            title=\\"選擇 Excel 檔案\\",\\n",
    "            filetypes=[(\\"Excel 檔案\\", \\"*.xlsx *.xls\\"), (\\"所有檔案\\", \\"*.*\\")],\\n",
    "            initialdir=last_folder\\n",
    "        )\\n",
    "        \\n",
    "        root.destroy()\\n",
    "        \\n",
    "        if file_path:\\n",
    "            excel_file_input.value = file_path\\n",
    "            last_folder = os.path.dirname(file_path)\\n",
    "            output_folder_input.value = os.path.dirname(file_path)\\n",
    "            \\n",
    "            # 🔍 預先驗證檔案\\n",
    "            with output:\\n",
    "                clear_output()\\n",
    "                print(f\\"✓ 已選擇: {os.path.basename(file_path)}\\")\\n",
    "                print(f\\"🔍 正在驗證檔案...\\")\\n",
    "                \\n",
    "                validation, error = validate_excel_file(file_path)\\n",
    "                if error:\\n",
    "                    print(f\\"❌ 檔案驗證失敗: {error}\\")\\n",
    "                    print(\\"⚠️ 此檔案可能有格式問題，建議檢查\\")\\n",
    "                else:\\n",
    "                    print(f\\"✅ 檔案驗證通過，可以安全處理\\")\\n",
    "                    print(f\\"📊 檔案資訊: {validation['has_data']} 行資料\\")\\n",
    "            \\n",
    "    except Exception as e:\\n",
    "        print(f\\"❌ 選擇檔案時發生錯誤: {str(e)}\\")\\n",
    "\\n",
    "excel_file_input = widgets.Text(\\n",
    "    value='',\\n",
    "    placeholder='選擇 Excel 檔案...',\\n",
    "    description='Excel 檔案:',\\n",
    "    layout=widgets.Layout(width='450px')\\n",
    ")\\n",
    "\\n",
    "browse_button = widgets.Button(\\n",
    "    description='瀏覽...',\\n",
    "    layout=widgets.Layout(width='100px')\\n",
    ")\\n",
    "\\n",
    "browse_button.on_click(lambda x: select_excel_file())\\n",
    "\\n",
    "reviewer_column_input = widgets.Text(\\n",
    "    value='Reviewer',\\n",
    "    description='審查者欄位:',\\n",
    "    layout=widgets.Layout(width='300px')\\n",
    ")\\n",
    "\\n",
    "output_folder_input = widgets.Text(\\n",
    "    value='',\\n",
    "    placeholder='輸出資料夾（預設為 Excel 檔案所在資料夾）',\\n",
    "    description='輸出資料夾:',\\n",
    "    layout=widgets.Layout(width='450px')\\n",
    ")\\n",
    "\\n",
    "display(widgets.HBox([excel_file_input, browse_button]))\\n",
    "display(reviewer_column_input)\\n",
    "display(output_folder_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# 🚨 修正版選項設定\\n",
    "display(HTML(\\"<h3>⚙️ 步驟 2: 處理方法選擇</h3>\\"))\\n",
    "\\n",
    "processing_method = widgets.RadioButtons(\\n",
    "    options=[\\n",
    "        ('隱藏列方法（推薦，解決格式問題）', 'hide_rows'),\\n",
    "        ('最安全方法（僅篩選，保持完整）', 'minimal_safe')\\n",
    "    ],\\n",
    "    value='hide_rows',\\n",
    "    description='處理方法:'\\n",
    ")\\n",
    "\\n",
    "copy_word_check = widgets.Checkbox(\\n",
    "    value=True,\\n",
    "    description='複製 Word 文件 (.doc, .docx)'\\n",
    ")\\n",
    "\\n",
    "copy_pdf_check = widgets.Checkbox(\\n",
    "    value=True,\\n",
    "    description='複製 PDF 文件 (.pdf)'\\n",
    ")\\n",
    "\\n",
    "display(processing_method)\\n",
    "display(copy_word_check)\\n",
    "display(copy_pdf_check)\\n",
    "\\n",
    "# 說明\\n",
    "display(HTML(\\"\\"\\"\\n",
    "<div style='background-color: #e8f4fd; padding: 15px; margin: 10px 0; border-left: 4px solid #2196F3;'>\\n",
    "<h4>🔧 處理方法說明</h4>\\n",
    "<ul>\\n",
    "<li><b>隱藏列方法</b>：隱藏不相關的資料列，保持檔案結構完整，解決格式錯誤問題</li>\\n",
    "<li><b>最安全方法</b>：僅設定篩選條件，完全不修改資料，適用於複雜的 Excel 檔案</li>\\n",
    "</ul>\\n",
    "</div>\\n",
    "\\"\\\"\\\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# 處理按鈕和輸出\\n",
    "process_button = widgets.Button(\\n",
    "    description='🚀 開始處理',\\n",
    "    button_style='success',\\n",
    "    layout=widgets.Layout(width='200px', height='40px')\\n",
    ")\\n",
    "\\n",
    "output = widgets.Output()\\n",
    "\\n",
    "display(HTML(\\"<br>\\"))\\n",
    "display(process_button)\\n",
    "display(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def process_excel_file_fixed(button):\\n",
    "    \\"\\"\\"🚨 修正版主要處理函數\\"\\"\\"\\n",
    "    with output:\\n",
    "        clear_output()\\n",
    "        \\n",
    "        # 驗證輸入\\n",
    "        if not excel_file_input.value:\\n",
    "            print(\\"❌ 請選擇 Excel 檔案\\")\\n",
    "            return\\n",
    "        \\n",
    "        file_path = excel_file_input.value.strip()\\n",
    "        column_name = reviewer_column_input.value.strip()\\n",
    "        output_folder = output_folder_input.value.strip() or os.path.dirname(file_path)\\n",
    "        method = processing_method.value\\n",
    "        \\n",
    "        if not os.path.exists(file_path):\\n",
    "            print(f\\"❌ 找不到檔案: {file_path}\\")\\n",
    "            return\\n",
    "        \\n",
    "        print(f\\"📁 處理檔案: {os.path.basename(file_path)}\\")\\n",
    "        print(f\\"📊 審查者欄位: {column_name}\\")\\n",
    "        print(f\\"📂 輸出資料夾: {output_folder}\\")\\n",
    "        print(f\\"🔧 處理方法: {method}\\")\\n",
    "        print(\\"=\\" * 60)\\n",
    "        \\n",
    "        # 🔍 預先驗證檔案\\n",
    "        print(\\"🔍 驗證輸入檔案...\\")\\n",
    "        validation, error = validate_excel_file(file_path)\\n",
    "        if error:\\n",
    "            print(f\\"❌ 輸入檔案驗證失敗: {error}\\")\\n",
    "            print(\\"⚠️ 建議檢查原始檔案是否有問題\\")\\n",
    "            return\\n",
    "        else:\\n",
    "            print(\\"✅ 輸入檔案驗證通過\\")\\n",
    "        \\n",
    "        start_time = time.time()\\n",
    "        \\n",
    "        try:\\n",
    "            # 讀取 Excel\\n",
    "            df = pd.read_excel(file_path, engine='openpyxl')\\n",
    "            \\n",
    "            if column_name not in df.columns:\\n",
    "                print(f\\"❌ 找不到欄位 '{column_name}'\\")\\n",
    "                print(f\\"可用欄位: {', '.join(df.columns)}\\")\\n",
    "                return\\n",
    "            \\n",
    "            reviewers = df[column_name].dropna().unique().tolist()\\n",
    "            print(f\\"✓ 找到 {len(reviewers)} 位審查者\\")\\n",
    "            \\n",
    "            # 進度條\\n",
    "            progress = widgets.IntProgress(\\n",
    "                value=0,\\n",
    "                min=0,\\n",
    "                max=len(reviewers),\\n",
    "                description='進度:',\\n",
    "                bar_style='info'\\n",
    "            )\\n",
    "            display(progress)\\n",
    "            \\n",
    "            processed = 0\\n",
    "            failed = 0\\n",
    "            \\n",
    "            for i, reviewer in enumerate(reviewers):\\n",
    "                print(f\\"\\\\n📝 處理 {reviewer} ({i+1}/{len(reviewers)})\\")\\n",
    "                \\n",
    "                # 根據方法選擇處理函數\\n",
    "                if method == 'minimal_safe':\\n",
    "                    success, folder_path, filename = process_reviewer_excel_minimal_safe(\\n",
    "                        file_path, reviewer, column_name, output_folder\\n",
    "                    )\\n",
    "                else:  # hide_rows\\n",
    "                    success, folder_path, filename = process_reviewer_excel_hide_rows_safe(\\n",
    "                        file_path, reviewer, column_name, output_folder\\n",
    "                    )\\n",
    "                \\n",
    "                if success:\\n",
    "                    # 複製相關文件\\n",
    "                    if copy_word_check.value or copy_pdf_check.value:\\n",
    "                        copied = copy_selected_documents(\\n",
    "                            os.path.dirname(file_path), folder_path,\\n",
    "                            copy_word=copy_word_check.value,\\n",
    "                            copy_pdf=copy_pdf_check.value\\n",
    "                        )\\n",
    "                        if copied:\\n",
    "                            print(f\\"  ✓ 已複製 {len(copied)} 個文件\\")\\n",
    "                    \\n",
    "                    processed += 1\\n",
    "                else:\\n",
    "                    failed += 1\\n",
    "                \\n",
    "                progress.value = i + 1\\n",
    "            \\n",
    "            elapsed_time = time.time() - start_time\\n",
    "            \\n",
    "            # 總結\\n",
    "            print(f\\"\\\\n{\\"=\\" * 60}\\")\\n",
    "            print(f\\"✅ 處理完成！\\")\\n",
    "            print(f\\"📊 成功: {processed}/{len(reviewers)} 位審查者\\")\\n",
    "            if failed > 0:\\n",
    "                print(f\\"❌ 失敗: {failed} 位\\")\\n",
    "            print(f\\"⏱️ 處理時間: {elapsed_time:.1f} 秒\\")\\n",
    "            print(f\\"📁 輸出位置: {output_folder}\\")\\n",
    "            \\n",
    "            if processed > 0:\\n",
    "                print(f\\"\\\\n🎉 修正成功！檔案應該可以正常開啟了\\")\\n",
    "                print(f\\"💡 如果還有問題，請嘗試'最安全方法'選項\\")\\n",
    "            \\n",
    "        except Exception as e:\\n",
    "            print(f\\"\\\\n❌ 處理過程發生錯誤: {str(e)}\\")\\n",
    "            import traceback\\n",
    "            traceback.print_exc()\\n",
    "\\n",
    "# 連接處理函數\\n",
    "process_button.on_click(process_excel_file_fixed)\\n",
    "print(\\"✅ 修正版處理系統已就緒\\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 📋 使用說明（修正版）\\n",
    "\\n",
    "### 🚨 主要修正內容\\n",
    "\\n",
    "1. **解決檔案格式問題**\\n",
    "   - 使用隱藏列替代刪除列\\n",
    "   - 保持檔案結構完整性\\n",
    "   - 避免破壞資料驗證規則\\n",
    "\\n",
    "2. **加強檔案驗證**\\n",
    "   - 處理前後都進行檔案驗證\\n",
    "   - 確保輸出檔案可正常開啟\\n",
    "   - 詳細的錯誤追蹤\\n",
    "\\n",
    "3. **提供多種處理方法**\\n",
    "   - 隱藏列方法：解決大部分格式問題\\n",
    "   - 最安全方法：適用於複雜檔案\\n",
    "\\n",
    "### 🔧 處理方法比較\\n",
    "\\n",
    "| 方法 | 檔案大小 | 安全性 | 相容性 | 推薦場景 |\\n",
    "|------|----------|--------|--------|----------|\\n",
    "| 隱藏列 | 不變 | 高 | 極高 | 一般使用 |\\n",
    "| 最安全 | 不變 | 極高 | 100% | 複雜檔案 |\\n",
    "| ~~刪除列~~ | ~~減少~~ | ~~低~~ | ~~差~~ | ~~不推薦~~ |\\n",
    "\\n",
    "### 🚀 快速開始\\n",
    "\\n",
    "1. 選擇有問題的 Excel 檔案\\n",
    "2. 確認審查者欄位名稱\\n",
    "3. 選擇處理方法（推薦：隱藏列）\\n",
    "4. 點擊開始處理\\n",
    "5. 檢查輸出檔案是否可正常開啟\\n",
    "\\n",
    "### 💡 疑難排解\\n",
    "\\n",
    "**如果仍然無法開啟檔案：**\\n",
    "1. 嘗試「最安全方法」\\n",
    "2. 檢查原始檔案是否有問題\\n",
    "3. 確認 Excel 版本相容性\\n",
    "4. 考慮使用不同的 Excel 應用程式開啟\\n",
    "\\n",
    "**常見問題：**\\n",
    "- 資料驗證失效 → 已修正，現在會保留\\n",
    "- 條件格式消失 → 使用隱藏列方法可避免\\n",
    "- 公式參照錯誤 → 不再刪除列，問題解決\\n",
    "- 合併儲存格問題 → 檔案結構保持完整"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
"""
    
    return notebook_content

# 執行建立函數
if __name__ == "__main__":
    content = create_jupyter_notebook_fixed()
    
    # 寫入檔案
    output_path = "/Users/davidshih/projects/excel/excel_splitter_onedrive_fixed.ipynb"
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"✅ 修正版 Jupyter notebook 已建立: {output_path}")
    print("🚨 主要修正內容：")
    print("  - 使用隱藏列替代刪除列")
    print("  - 保持檔案結構完整性")
    print("  - 加強檔案驗證機制")
    print("  - 提供多種處理方法選擇")